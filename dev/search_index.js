var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PlantGeom","category":"page"},{"location":"#PlantGeom","page":"Home","title":"PlantGeom","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PlantGeom.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PlantGeom]","category":"page"},{"location":"#PlantGeom.Material","page":"Home","title":"PlantGeom.Material","text":"Data structure for a mesh material that is used to describe the light components of a Phong reflection type model. All data is stored as RGBÎ± for Red, Green, Blue and transparency.\n\n\n\n\n\n","category":"type"},{"location":"#PlantGeom.RefMesh","page":"Home","title":"PlantGeom.RefMesh","text":"RefMesh type. Stores all information about a reference Mesh\n\n\n\n\n\n","category":"type"},{"location":"#PlantGeom.RefMeshes","page":"Home","title":"PlantGeom.RefMeshes","text":"RefMeshes type. Stores all RefMesh.\n\n\n\n\n\n","category":"type"},{"location":"#MakieCore.plot!-Tuple{MakieCore.Combined{MeshViz.viz, <:Tuple{MultiScaleTreeGraph.Node}}}","page":"Home","title":"MakieCore.plot!","text":"using MultiScaleTreeGraph, PlantGeom, GLMakie\n\nfile = joinpath(dirname(dirname(pathof(PlantGeom))),\"test\",\"files\",\"simpleOPFshapes.opf\")\n\nfile = joinpath(dirname(dirname(pathof(PlantGeom))),\"test\",\"files\",\"coffee.opf\")\n\nfile = \"D:/OneDrive - cirad.fr/TravailAMAP/Processes/LightinterceptionGPU/Julia3D/P6Ruii_L2P02.opf\"\n\nopf = readopf(file) refmeshes = getrefmeshes(opf)\n\nviz(ref_meshes)\n\ntransform!(opf, (node -> refmeshtomesh(node, ref_meshes)) => :mesh)\n\nWith one shared color:\n\nviz(opf, color = :green)\n\nOne color per reference mesh:\n\nviz(opf, color = Dict(0 => :burlywood4, 1 => :springgreen4))\n\nOr just changing the color of some:\n\nviz(opf, color = Dict(0 => :burlywood4))\n\nOne color for each vertex of the refmesh 1:\n\nviz(opf, color = Dict(1 => 1:nvertices(ref_meshes)[1]))\n\nOr coloring by opf attribute, e.g. using the mesh max Z coordinates:\n\ntransform!(opf, :mesh => (x -> maximum([i.coords[3] for i in x.points])) => :zmax, ignorenothing = true) viz(opf, color = :z_max)\n\n\n\n\n\n","category":"method"},{"location":"#MakieCore.plot!-Tuple{MakieCore.Combined{MeshViz.viz, <:Tuple{PlantGeom.RefMeshes}}}","page":"Home","title":"MakieCore.plot!","text":"using MultiScaleTreeGraph, PlantGeom, WGLMakie, Meshes\n\nfile = joinpath(dirname(dirname(pathof(MultiScaleTreeGraph))),\"test\",\"files\",\"simpleOPFshapes.opf\") opf = readopf(file) meshes = getref_meshes(opf)\n\nviz(meshes)\n\nWith one shared color:\n\nviz(meshes, color = :green)\n\nOne color per reference mesh:\n\nviz(meshes, color = Dict(0 => :burlywood4, 1 => :springgreen4, 2 => :burlywood4))\n\nOr just changing the color of some:\n\nviz(meshes, color = Dict(0 => :burlywood4, 2 => :burlywood4))\n\nOne color for each vertex of the refmesh 0:\n\nnvertices(meshes)[1] viz(meshes, color = Dict(0 => 1:nvertices(meshes)[0]))\n\n\n\n\n\n","category":"method"},{"location":"#Meshes.nelements-Tuple{PlantGeom.RefMeshes}","page":"Home","title":"Meshes.nelements","text":"nelements(meshes::RefMeshes)\n\nReturn the number of elements for each reference mesh as a dict of id => nelements\n\n\n\n\n\n","category":"method"},{"location":"#Meshes.nvertices-Tuple{PlantGeom.RefMeshes}","page":"Home","title":"Meshes.nvertices","text":"nvertices(meshes::RefMeshes)\n\nReturn the number of vertices for each reference mesh as a dict of id => nvertices\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeom.align_ref_meshes-Tuple{PlantGeom.RefMeshes}","page":"Home","title":"PlantGeom.align_ref_meshes","text":"align_ref_meshes(meshes::RefMeshes)\n\nAlign all reference meshes along the X axis. Used for visualisation only.\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeom.get_attr_type-Tuple{Any}","page":"Home","title":"PlantGeom.get_attr_type","text":"Get the attributes types in Julia DataType.\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeom.get_ref_meshes-Tuple{Any}","page":"Home","title":"PlantGeom.get_ref_meshes","text":"get_ref_meshes(mtg)\n\nGet all reference meshes from an mtg, usually from an OPF.\n\nExamples\n\nusing MultiScaleTreeGraph, PlantGeom\nfile = joinpath(dirname(dirname(pathof(MultiScaleTreeGraph))),\"test\",\"files\",\"simple_OPF_shapes.opf\")\nopf = read_opf(file)\nmeshes = get_ref_meshes(opf)\n\nusing MeshViz, GLMakie\nviz(meshes)\nmeshes.meshes[0].material\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeom.get_ref_meshes_color-Tuple{PlantGeom.RefMeshes}","page":"Home","title":"PlantGeom.get_ref_meshes_color","text":"get_ref_meshes_color(meshes::RefMeshes)\n\nGet the reference meshes colors (only the diffuse part for now).\n\nExamples\n\nusing MultiScaleTreeGraph, PlantGeom\nfile = joinpath(dirname(dirname(pathof(MultiScaleTreeGraph))),\"test\",\"files\",\"simple_OPF_shapes.opf\")\nopf = read_opf(file)\nmeshes = get_ref_meshes(opf)\nPlantGeom.get_ref_meshes_color(meshes)\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeom.materialBDD_to_material-Tuple{Any}","page":"Home","title":"PlantGeom.materialBDD_to_material","text":"Parse a material in opf format to a material\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeom.meshBDD_to_meshes-Tuple{Any}","page":"Home","title":"PlantGeom.meshBDD_to_meshes","text":"meshBDD_to_meshes(x)\n\nExamples\n\nusing MultiScaleTreeGraph\nfile = joinpath(dirname(dirname(pathof(MultiScaleTreeGraph))),\"test\",\"files\",\"simple_OPF_shapes.opf\")\nopf = read_opf(file)\nmeshBDD_to_meshes(opf.attributes[:meshBDD])\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeom.parse_geometry-Tuple{Any}","page":"Home","title":"PlantGeom.parse_geometry","text":"Parse the geometry element of the OPF.\n\nNote\n\nThe transformation matrix is 3*4. elem = elem.content\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeom.parse_meshBDD!-Tuple{Any}","page":"Home","title":"PlantGeom.parse_meshBDD!","text":"Parse the meshBDD using [`parseopf_array`](@ref)\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeom.parse_opf_array","page":"Home","title":"PlantGeom.parse_opf_array","text":"Parse an array of values from the OPF into a Julia array (Arrays in OPFs are not following XML recommendations)\n\n\n\n\n\n","category":"function"},{"location":"#PlantGeom.parse_opf_attributeBDD!-Tuple{Any}","page":"Home","title":"PlantGeom.parse_opf_attributeBDD!","text":"Parse the opf attributes as a Dict.\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeom.parse_opf_elements!-Tuple{Any, Any}","page":"Home","title":"PlantGeom.parse_opf_elements!","text":"Generic parser for OPF elements.\n\nArguments\n\nopf::OrderedDict: the opf Dict (using [XMLDict.xml_dict])\nelem_types::Array: the target types of the element (e.g. \"[String, Int64]\")\n\nDetails\n\nelem_types should be of the same length as the number of elements found in each item of the subchild. elem_types = [Float64, Float64, Float64, Float64, Float64, Float64]\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeom.parse_opf_topology!","page":"Home","title":"PlantGeom.parse_opf_topology!","text":"Parser for OPF topology.\n\nNote\n\nThe transformation matrices in geometry are 3*4. parseopftopology!(elem, nodei, features) node = elem mtg = nodei features = getattrtype(opf_attr[:attributeBDD])\n\nDebugging:\n\nmtg = nothing\n\nnode = elem mtg = nodei parseopftopology!(                 node,                 nothing,                 getattrtype(opfattr[:attributeBDD]),                 attrtype,                 mtgtype             )\n\n\n\n\n\n","category":"function"},{"location":"#PlantGeom.parse_ref_meshes-Tuple{Any}","page":"Home","title":"PlantGeom.parse_ref_meshes","text":"parse_ref_meshes(mtg)\n\nParse the reference meshes of an OPF into RefMeshes.\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeom.read_opf","page":"Home","title":"PlantGeom.read_opf","text":"read_opf(file, attr_type = Dict, mtg_type = MutableNodeMTG)\n\nRead an OPF file, and returns an MTG.\n\nArguments\n\nfile::String: The path to the opf file.\nattr_type::DataType = Dict: the type used to hold the attribute values for each node.\nmtg_type = MutableNodeMTG: the type used to hold the mtg encoding for each node (i.e.\n\nlink, symbol, index, scale). See details section below.\n\nDetails\n\nattr_type should be:\n\nNamedTuple if you don't plan to modify the attributes of the mtg, e.g. to use them for\n\nplotting or computing statistics...\n\nMutableNamedTuple if you plan to modify the attributes values but not adding new attributes\n\nvery often, e.g. recompute an attribute value...\n\nDict or similar (e.g. OrderedDict) if you plan to heavily modify the attributes, e.g.\n\nadding/removing attributes a lot\n\nThe MultiScaleTreeGraph package provides two types for mtg_type, one immutable (NodeMTG), and one mutable (MutableNodeMTG). If you're planning on modifying the mtg encoding of some of your nodes, you should use MutableNodeMTG, and if you don't want to modify anything, use NodeMTG instead as it should be faster.\n\nNote\n\nSee the documentation of the MTG format from the package documentation for further details, e.g. The MTG concept.\n\nReturns\n\nThe MTG root node.\n\nExamples\n\nusing PlantGeom\nfile = joinpath(dirname(dirname(pathof(PlantGeom))),\"test\",\"files\",\"simple_OPF_shapes.opf\")\nopf = read_opf(file)\n\n\n\n\n\n","category":"function"},{"location":"#PlantGeom.refmesh_to_mesh-Tuple{Any, Any}","page":"Home","title":"PlantGeom.refmesh_to_mesh","text":"refmesh_to_mesh(node, ref_meshes)\n\nCompute a node mesh based on the reference mesh, the transformation matrix and the tapering.\n\nExamples\n\nusing PlantGeom\nfile = joinpath(dirname(dirname(pathof(PlantGeom))),\"test\",\"files\",\"simple_OPF_shapes.opf\")\nopf = read_opf(file)\n\nnode = opf[1][1][1]\n\nnew_mesh = refmesh_to_mesh(node, get_ref_meshes(opf))\n\nusing MeshViz, GLMakie\nviz(new_mesh)\n\n\n\n\n\n","category":"method"},{"location":"#PlantGeom.taper-Tuple{Any, Any, Any}","page":"Home","title":"PlantGeom.taper","text":"Returns a tapered mesh using dDwn and dUp based on the geometry of an input mesh. Tapering a mesh transforms it into a tapered version (i.e. pointy) or enlarged object, e.g. make a cone from a cylinder.\n\n\n\n\n\n","category":"method"}]
}
